{"version":3,"sources":["assets/AcklenHeart.js","App.js","serviceWorker.js","index.js"],"names":["AcklenHeart","width","height","xmlns","viewBox","fill","d","App","useReducer","state","newState","token","key","value","input","setInputValue","useState","itemValue","setValue","useEffect","existingToken","localStorage","getItem","fetch","method","then","response","text","result","setItem","handleInputChange","event","target","name","style","margin","Header","textAlign","fontSize","Form","Group","widths","Field","label","onChange","control","Input","placeholder","TextArea","Divider","hidden","Grid","columns","stackable","Row","Column","Button","type","onClick","headers","body","status","toast","success","error","disabled","isEmpty","verticalAlign","Message","compact","position","bottom","left","right","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.cd12aa70.chunk.js","sourcesContent":["import React from \"react\";\n\nconst AcklenHeart = ({ width, height }) => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 258 225\" width={30} height={30}>\n    <title>Acklen-Heart</title>\n    <path fill=\"#71C048\" d=\"M181.9 32.1c10.9 0 10.9 0 10.9 10.9 0 11.1 0 11.1-11.1 11.1-10.8 0-10.8 0-10.8-10.9-.1-11.1-.1-11.1 11-11.1zM164.8 43.3c0 11 0 11-10.8 11-11.1 0-11.1 0-11.1-11.1 0-11 0-11 10.8-11 11.1 0 11.1 0 11.1 11.1zM108.3 43.5c0 10.7 0 10.7-10.6 10.7-11.5 0-11.5 0-11.5-11.8 0-10.2 0-10.2 10.1-10.2h.5c11.5 0 11.5 0 11.5 11.3zM80.2 43.1c0 11.2 0 11.2-11.1 11.2-11 0-11 0-11-10.8 0-11.4 0-11.4 11.4-11.4 10.7 0 10.7 0 10.7 11z\" />\n    <path fill=\"#71C048\" d=\"M220.9 71.3c0 11.1 0 11.1-11.2 11.1-10.8 0-10.8 0-10.8-11 0-11.3 0-11.3 10.9-11.3 11.1 0 11.1 0 11.1 11.2zM170.9 71.3c0-11.2 0-11.2 11-11.2 10.9 0 10.9 0 10.9 10.8 0 11.5 0 11.5-11.3 11.5-10.6 0-10.6 0-10.6-11.1zM153.9 82.4c-11.1 0-11.1 0-11.1-11.2s0-11.2 11.1-11.2c10.9 0 10.9 0 10.9 10.8v.5c0 11.1 0 11.1-10.9 11.1zM136.3 71.1c0 11.1 0 11.1-11.2 11.1-10.5 0-10.5 0-10.5-10.3 0-11.9 0-11.9 11.9-11.9 9.8.1 9.8.1 9.8 11.1zM86.2 71.5c0-11.4 0-11.4 11.4-11.4 10.6 0 10.6 0 10.6 10.6 0 11.7 0 11.7-11.6 11.7-10.4 0-10.4 0-10.4-10.9zM69.1 82.3C58 82.3 58 82.3 58 71.1c0-11 0-11 11.2-11 11.1 0 11.1 0 11.1 11.1s0 11.1-11.2 11.1zM30 71.1C30 60 30 60 41.2 60 52 60 52 60 52 70.9c0 11.4 0 11.4-11.4 11.4-10.6 0-10.6 0-10.6-11.2z\" />\n    <path fill=\"#74C24D\" d=\"M220.9 99.4c0 11.3 0 11.3-11.4 11.3-10.5 0-10.5 0-10.5-10.8 0-11.8 0-11.8 11.9-11.8 10 0 10 0 10 10.2v1.1zM192.7 99.2c0 11.5 0 11.5-11.3 11.5-10.7 0-10.7 0-10.7-11.1 0-11.5 0-11.5 11.3-11.5 10.7.1 10.7.1 10.7 11.1zM164.8 99.4c0 11.4 0 11.4-11.5 11.4-10.6 0-10.6 0-10.6-10.7 0-11.8 0-11.8 11-11.8 11.1-.1 11.1-.1 11.1 11.1z\" />\n    <path fill=\"#71C048\" d=\"M136.3 99.3c0 11.4 0 11.4-11.4 11.4-10.5 0-10.5 0-10.5-10.4 0-12.2 0-12.2 12.2-12.2 9.7.1 9.7.1 9.7 11.2z\" />\n    <path fill=\"#74C24D\" d=\"M86.3 99.2c0-11 0-11 11.2-11 10.7 0 10.7 0 10.7 11 0 11.6 0 11.6-10.7 11.6-11.2-.1-11.2-.1-11.2-11.6z\" />\n    <path fill=\"#71C048\" d=\"M69.2 88.1c10.9 0 10.9 0 10.9 10.8 0 11.4 0 11.4-11.4 11.4-10.7 0-10.7 0-10.7-10.6v-.5c.1-11.1.1-11.1 11.2-11.1z\" />\n    <path fill=\"#74C24D\" d=\"M52.1 99.7c0 11 0 11-11.2 11-10.9 0-10.9 0-10.9-10.8 0-11.8 0-11.8 11.4-11.8 10.6 0 10.6 0 10.6 10.6.1.3.1.7.1 1z\" />\n    <path fill=\"#74C24D\" d=\"M192.8 128.3c0 10.6 0 10.6-10.7 10.6-11.3 0-11.3 0-11.3-11.4 0-11.1 0-11.1 10.6-11.1 11.4 0 11.4 0 11.4 11.5v.4zM164.7 127.5c0 11.3 0 11.3-11.1 11.3s-11.1 0-11.1-11.3 0-11.3 11.5-11.3c10.7 0 10.7 0 10.7 11.3z\" />\n    <path fill=\"#71C048\" d=\"M114.8 127.5c0-11.3 0-11.3 11-11.3 10.8 0 10.8 0 10.8 10.6 0 12 0 12-11.8 12-9.9 0-9.9 0-9.9-9.9-.1-.4-.1-.9-.1-1.4z\" />\n    <path fill=\"#74C24D\" d=\"M86.2 127.2c0-11 0-11 10.8-11 11.2 0 11.2 0 11.2 11.1 0 11.5 0 11.5-11.3 11.5-10.7 0-10.7 0-10.7-11.6z\" />\n    <path fill=\"#71C048\" d=\"M80.2 127.9c0 10.9 0 10.9-10.9 10.9-11.3 0-11.3 0-11.3-11.4 0-11.2 0-11.2 11.1-11.2s11.1 0 11.1 11.7z\" />\n    <path fill=\"#71C048\" d=\"M164.7 155.7c0 11.2 0 11.2-11 11.2-10.9 0-10.9 0-10.9-10.9 0-11.6 0-11.6 11.2-11.6 10.7 0 10.7 0 10.7 11.3zM136.6 155.6c0 11.3 0 11.3-11 11.3-10.8 0-10.8 0-10.8-11 0-11.5 0-11.5 11.2-11.5 10.6-.1 10.6-.1 10.6 11.2z\" />\n    <path fill=\"#74C24D\" d=\"M86.3 155.6c0-11.3 0-11.3 11.1-11.3 11.3 0 11.3 0 11.3 11.5 0 10.9 0 10.9-10.8 10.9h-.5c-11.1.1-11.1.1-11.1-11.1z\" />\n    <path fill=\"#71C048\" d=\"M114.6 183.3c0-10.7 0-10.7 10.7-10.7 11 0 11 0 11 11.3 0 10.9 0 10.9-10.9 10.9-10.8 0-10.8 0-10.8-10.6v-.9z\" />\n  </svg>\n\n);\n\nexport default AcklenHeart;\n","import React, { useState, useReducer, useEffect } from 'react';\nimport { Form, Input, Header, Divider, TextArea, Button, Grid, Message } from 'semantic-ui-react';\nimport { isEmpty } from 'ramda';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport AcklenHeart from './assets/AcklenHeart';\n\nfunction App() {\n  const [input, setInputValue] = useReducer(\n    (state, newState) => ({ ...state, ...newState }),\n    {\n      token: '',\n      key: 'someKey',\n      value: 'Add data to be saved here',\n    }\n  );\n  const [itemValue, setValue] = useState('');\n  useEffect(() => {\n    const existingToken = localStorage.getItem('token');\n    if(!existingToken){\n      fetch('https://data-clouds.herokuapp.com/api/token', {\n        method: 'GET',\n      })\n        .then((response) => response.text())\n        .then((result) => {\n          setInputValue({ token: result });\n          localStorage.setItem('token', result);\n        })\n    } else {\n      setInputValue({token: existingToken});\n    }\n  }, [])\n  const { token, value, key } = input;\n\n  const handleInputChange = event => {\n    setInputValue({ [event.target.name]: event.target.value });\n  };\n  const createItem = () => {\n    fetch(`https://data-clouds.herokuapp.com/api/value/${key}`, {\n      method: 'PUT',\n      headers: {\n        'token': token\n      },\n      body: value\n    })\n      .then(result => {\n        if (result.status === 200) {\n          toast.success('Value has been saved.')\n        } else {\n          toast.error('Please, validate all fields have been filled.');\n        }\n      });\n    setInputValue({ value: '' });\n  };\n  const getItem = () => {\n    fetch(`https://data-clouds.herokuapp.com/api/value/${key}`, {\n      method: 'GET',\n      headers: { 'token': token }\n    })\n      .then((response) => response.text())\n      .then((result) => setValue(result))\n  };\n  return (\n    <div style={{ margin: '1em' }}>\n      <ToastContainer />\n      <Header textAlign='center' style={{fontSize: '20px'}}>\n        MemStash\n      </Header>\n      <Form>\n        <Form.Group widths='equal'>\n          <Form.Field\n            label='Token'\n            value={token}\n            name='token'\n            onChange={handleInputChange}\n            control={Input}\n            placeholder='Enter a token'\n          />\n          <Form.Field\n            value={key}\n            name='key'\n            label='Key'\n            onChange={handleInputChange}\n            control={Input}\n            placeholder='Enter a key to identify value'\n          />\n        </Form.Group>\n        <Form.Field\n          value={value}\n          name='value'\n          label='Value'\n          onChange={handleInputChange}\n          control={TextArea}\n          placeholder='Enter data to be saved'\n        />\n      </Form>\n      <Divider hidden />\n      <Grid columns={2} stackable textAlign='center'>\n        <Grid.Row>\n          <Grid.Column>\n            <Button type='button' onClick={createItem} disabled={isEmpty(key && value)}>Test Put</Button>\n          </Grid.Column>\n          <Grid.Column>\n            <Button type='button' onClick={getItem} disabled={isEmpty(key)}>Test Get</Button>\n          </Grid.Column>\n        </Grid.Row>\n      </Grid>\n      <Divider hidden />\n      <Grid columns={2} stackable textAlign='center'>\n        <Grid.Row verticalAlign='middle'>\n          <Grid.Column>\n            <Header>\n              PUT Curl\n              </Header>\n            <Message compact>\n              {`\n                  curl -H \"Content-Type: text/plain\" -H \"token: ${token}\" --request PUT --data \"${value}\" https://data-clouds.herokuapp.com/api/value/${key}\n                `}\n            </Message>\n          </Grid.Column>\n          <Grid.Column>\n            <Header>\n              GET Curl\n              </Header>\n            <Message compact>\n              {`\n                curl -H \"token: ${token}\" --request GET https://data-clouds.herokuapp.com/api/value/${key}\n              `}\n            </Message>\n          </Grid.Column>\n        </Grid.Row>\n      </Grid>\n      <Divider hidden />\n      {!isEmpty(itemValue) &&\n        <span>\n          {\n            itemValue\n          }\n        </span>\n      }\n      <Header textAlign='center' style={{fontSize: '11px', position: 'fixed', bottom: '12px', left: '0px', right: '0px'}}>\n        Made with <AcklenHeart /> by Acklen Avenue\n      </Header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}