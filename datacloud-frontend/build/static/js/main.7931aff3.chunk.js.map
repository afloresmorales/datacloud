{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useReducer","state","newState","newToken","key","newKey","value","token","input","setInputValue","useState","valueObject","setValueObject","useEffect","fetch","method","then","response","json","result","handleInputChange","event","target","name","style","margin","Header","content","Form","Group","widths","Field","label","onChange","control","Input","placeholder","TextArea","Button","type","onClick","headers","body","JSON","stringify","disabled","isEmpty","Divider","hidden","isNil","Message","error","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.7931aff3.chunk.js","sourcesContent":["import React, { useState, useReducer, useEffect } from 'react';\nimport { Form, Input, Header, Divider, TextArea, Message } from 'semantic-ui-react';\nimport { isEmpty, isNil } from 'ramda';\n\nfunction App() {\n  const [input, setInputValue] = useReducer(\n    (state, newState) => ({ ...state, ...newState }),\n    {\n      newToken: '',\n      key: '',\n      newKey: '',\n      value: '',\n      token: ''\n    }\n  );\n  const [valueObject, setValueObject] = useState({});\n  useEffect(() => {\n    fetch('https://data-clouds.herokuapp.com/api/token', {\n      method: 'GET',\n    })\n      .then((response) => response.json())\n      .then((result) => setInputValue({ newToken: result.token }))\n  }, [])\n  const { newToken, token, key, value, newKey } = input;\n\n  const handleInputChange = event => {\n    setInputValue({ [event.target.name]: event.target.value });\n  };\n  const createItem = () => {\n    fetch('https://data-clouds.herokuapp.com/api/value', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'token': newToken\n      },\n      body: JSON.stringify({ key: newKey, value })\n    })\n  };\n  const getItem = () => {\n    fetch(`https://data-clouds.herokuapp.com/api/value/${key}`, {\n      method: 'GET',\n      headers: { 'token': token }\n    })\n      .then((response) => response.json())\n      .then((result) => setValueObject(result.value))\n  };\n  return (\n    <div style={{ margin: '1em' }}>\n      <Header content='Create Key and Value' />\n      <Form>\n        <Form.Group widths='equal'>\n          <Form.Field\n            value={newToken}\n            name='newToken'\n            label='Token'\n            onChange={handleInputChange}\n            control={Input}\n            placeholder='Enter a token'\n          />\n          <Form.Field\n            value={newKey}\n            name='newKey'\n            label='Key'\n            onChange={handleInputChange}\n            control={Input}\n            placeholder='Enter a key to identify value'\n          />\n        </Form.Group>\n\n        <Form.Field\n          value={value}\n          name='value'\n          label='Value'\n          onChange={handleInputChange}\n          control={TextArea}\n          placeholder='Enter data to be saved'\n        />\n        <Form.Button type='button' onClick={createItem} disabled={isEmpty(newToken)}>Create</Form.Button>\n      </Form>\n      <Divider hidden />\n      <Header content='Get Value' />\n      <Form>\n        <Form.Group widths='equal'>\n          <Form.Field\n            value={token}\n            name='token'\n            label='Token'\n            onChange={handleInputChange}\n            control={Input}\n            placeholder='Enter a token'\n          />\n          <Form.Field\n            value={key}\n            name='key'\n            label='Key'\n            onChange={handleInputChange}\n            control={Input}\n            placeholder='Enter a key to identify value'\n          />\n        </Form.Group>\n        <Form.Button type='button' onClick={getItem} disabled={isEmpty(token)}>Get</Form.Button>\n      </Form>\n      <Divider hidden />\n      {!isNil(valueObject) && !isEmpty(valueObject) &&\n        <span>\n          {\n            `${valueObject.key}: ${valueObject.value}`\n          }\n        </span>\n      }\n      {isNil(valueObject) && <Message error>No value matches the provided token and key.</Message>}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}